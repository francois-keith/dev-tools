#! /usr/bin/perl  --                                                                                -*-perl-*-

##########
# README #
##########
#
# This scripts allows automatic generation of packages.
# It is a perl script. To use it:
# $ chmod u+x packageCreate
# $ cd /tmp && /path/to/packageCreate -p foo
#
# It will create a package in /tmp/foo.


####################
# Import packages. #
####################
use strict;
use warnings;
use Getopt::Long;

use FindBin qw($Bin);
use Env qw(EMAIL FULLNAME);

# Search for the template-project directory.
my $tplProjectDir = "";

if (defined($ENV{PACKAGECREATE_SHAREDIR})) {
    $tplProjectDir = $ENV{PACKAGECREATE_SHAREDIR};
} else {
    $tplProjectDir = "@prefix@/share/@PACKAGE_TARNAME@";
}
$tplProjectDir = $tplProjectDir."/template-project";


#######################
# Parse command line. #
#######################

my ($pkg, $print_version, $print_help, @dep, @docdep);
my $usage = "packageCreate -p <packageName> -d dependency -dd docDependency";
my $version = "@PACKAGE_VERSION@";

usage() if !GetOptions("version|v"   => \$print_version,
                       "help|h"      => \$print_help,
                       "package|p=s" => \$pkg,
                       "dep|d:s"     => \@dep,
                       "docdep|dd:s"  => \@docdep);

if ($print_version) {
    print "packageCreate version $version\n";
    exit;
}

if ($print_help) {
    print "$usage\n
  Generate an Autotools package and provides basic support for testing with Autotest
  and Doxygen documentation.

  --dep|-d dependency
     Define a compilation dependency from this package to another.

  --docdep|-dd docDependency
     Define a documentation dependency from this package to another.
     Documentation dependencies are handled by Doxygen to track class inheritance between packages.

  --version|-v
     print version information.

  --help|-?
    print help.\n";
    exit;
}

sub usage {
    print "Unknown option: @_\n" if ( @_ );
    print "$usage\n";
    print "Use --help for additional information.\n";
    exit;
}

#####################
# Global variables. #
#####################
# Lower case.
my $package_lc = lc ($pkg);
# Upper case.
my $package_uc = uc ($pkg);
# Caml case.
my $package_cc = ucfirst ($package_lc);


###################
# Various checks. #
###################
if (!$pkg) { print $usage . "\n"; exit 1 }

if (!$FULLNAME) {
    print "Please specify your name in the FULLNAME environment variable.\n";
    exit 1;
}

if (!$EMAIL) {
    print "Please specify your e-mail in the EMAIL environment variable.\n";
    exit 1;
}

if (-d $package_lc) {
    print "The directory already exists, please remove it first if necessary.\n";
    exit 1;
}


#####################
# Generate package. #
#####################
# Copy template into specified location.
system("cp -Rf $tplProjectDir $package_lc");

# Generate deps.ac
open(OUTPUT, ">"."$package_lc/deps.ac") or
  die "Cannot open output file $package_lc/deps.ac \n";

my ($iDep, $D, $d);
for ($iDep = 0; $iDep< scalar(@dep); $iDep++) {
    $D = uc ($dep[$iDep]);
    $d = lc ($dep[$iDep]);

    print OUTPUT  "m4_define([$d"."_reqd], [$dep[$iDep] >= 0.1])\n";
    print OUTPUT  "AC_SUBST([$D"."_REQD], [\"$d"."_reqd\"])\n";
    print OUTPUT  "PKG_CHECK_MODULES([$D], [$d"."_reqd])\n";
    print OUTPUT  "$D\_PREFIX=\`\$PKG_CONFIG $dep[$iDep] --variable=prefix\`\n";
    print OUTPUT  "$D\_DOCDIR=\`\$PKG_CONFIG $dep[$iDep] --variable=docdir\`\n";
    print OUTPUT  "AC_SUBST([$D\_CFLAGS])\n";
    print OUTPUT  "AC_SUBST([$D\_LIBS])\n";
    print OUTPUT  "AC_SUBST([$D\_PREFIX])\n";
    print OUTPUT  "AC_SUBST([$D\_DOCDIR])\n";
    print OUTPUT  "\n";

}

for ($iDep = 0; $iDep< scalar(@docdep); $iDep++) {
    $D = uc ($docdep[$iDep]);
    $d = lc ($docdep[$iDep]);
    print OUTPUT  "PKG_CHECK_MODULES([$D], [$docdep[$iDep]])\n";
    print OUTPUT  "$D\_PREFIX=\`\$PKG_CONFIG $docdep[$iDep] --variable=prefix\`\n";
    print OUTPUT  "$D\_DOCDIR=\`\$PKG_CONFIG $docdep[$iDep] --variable=docdir\`\n";
    print OUTPUT  "AC_SUBST([$D\_PREFIX])\n";
    print OUTPUT  "AC_SUBST([$D\_DOCDIR])\n";
    print OUTPUT  "\n";
}

print OUTPUT  "AC_SUBST([PKGCONFIG_REQUIRES], [\"";
for ($iDep = 0; $iDep< scalar(@dep); $iDep++) {
    $D = uc ($dep[$iDep]);
    $d = lc ($dep[$iDep]);
    print OUTPUT  "$d"."_reqd";
    if ($iDep < scalar(@dep)-1) {
	print OUTPUT ", ";
    }
}
print OUTPUT  "\"])\n";

close(OUTPUT);

# Generate sed arguments.
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
$year += 1900;
$mon += 1;

my $DATE="$year-$mon-$mday";
my $PKG_DEPS = join(", ", @dep);
my $PKG_DOCDEPS = "";
my $PKG_DEPS_CFLAGS = "";
my $PKG_DEPS_LIBS = "";

# Generate PKG_DOCDEPS
for ($iDep=0; $iDep<scalar(@dep); $iDep++) {
  my $dd = $dep[$iDep];
  $D = uc ($dd);
  $d = lc ($dd);
  $PKG_DOCDEPS = $PKG_DOCDEPS."\@$D\_DOCDIR\@/html/$dd.doxytag=\@$D\_DOCDIR\@/html ";
}

for ($iDep=0; $iDep<scalar(@docdep); $iDep++) {
  my $dd = $docdep[$iDep];
  $D = uc ($dd);
  $d = lc ($dd);
  $PKG_DOCDEPS = $PKG_DOCDEPS."\@$D\_DOCDIR\@/html/$dd.doxytag=\@$D\_DOCDIR\@/html ";
}

# Generate PKG_DEPS_CFLAGS
for ($iDep=0; $iDep<scalar(@dep); $iDep++) {
  my $dd = $dep[$iDep];
  $D = uc ($dd);
  $PKG_DEPS_CFLAGS = $PKG_DEPS_CFLAGS."\$($D\_CFLAGS) ";
}

# Generate PKG_DEPS_LIBS
for ($iDep=0; $iDep<scalar(@dep); $iDep++) {
  my $dd = $dep[$iDep];
  $D = uc ($dd);
  $PKG_DEPS_LIBS = $PKG_DEPS_LIBS."\$($D\_LIBS) ";
}


my $sed_args = "-e 's,&PACKAGE_TARNAME&,$package_lc,g' \\
                -e 's,&PACKAGE_TARNAME_LC&,$package_lc,g' \\
                -e 's,&PACKAGE_TARNAME_UC&,$package_uc,g' \\
                -e 's,&PACKAGE_TARNAME_CC&,$package_cc,g' \\
                -e 's,&PACKAGE_NAME&,$pkg,g' \\
                -e 's|&PKG_DEPS&|$PKG_DEPS|g' \\
                -e 's|&PKG_DOCDEPS&|$PKG_DOCDEPS|g' \\
                -e 's|&PKG_DEPS_CFLAGS&|$PKG_DEPS_CFLAGS|g' \\
                -e 's|&PKG_DEPS_LIBS&|$PKG_DEPS_LIBS|g' \\
                -e 's,&VERSION&,$version,g' \\
                -e 's,&FULLNAME&,$FULLNAME,g' \\
                -e 's,&EMAIL&,$EMAIL,g' \\
                -e 's,&DATE&,$DATE,g'";

# Tune files.
system("find $package_lc -type f -print0 | xargs -0 sed -i $sed_args \n");

# Move sample C++ source/header file.
system("mv $package_lc/src/package.cc $package_lc/src/$package_lc.cc");
system("mv $package_lc/include/package/package.hh $package_lc/include/package/$package_lc.hh");
system("mv $package_lc/include/package $package_lc/include/$package_lc");

############################
# Print user instructions. #
############################
print "To configure and test this package, do the following commands\n";
print "cd $pkg\n";
print "./bootstrap\n";
print "mkdir _build\n";
print "cd _build\n";
print "../configure --prefix=... CXXFLAGS=\"-g -DDEBUG=2\"\n";
print "make\n";
print "\n";
print "If you want...\n";
print "* to get a tarball (to distribute the package): make distcheck\n";
print "* to generate the doc: make doc\n";
print "* to align the testsuite to current outputs: \n";
print "    cd _build/tests && make generate-reference\n";
print "Please make sure to generate the stdout files with the previous\n";
print "command line *before* trying a make distcheck.\n";
print "\n";
print "See Autotools documentation for more information:\n";
print "* Autoconf: http://www.gnu.org/software/autoconf/manual/\n";
print "* Automake: http://www.gnu.org/software/automake/manual/\n";
print "* Libtool: http://www.gnu.org/software/libtool/manual/\n";
exit;
