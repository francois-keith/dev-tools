#!/usr/bin/perl  -- -*-perl-*-
##
## Parameters
##

$i=0;
$nDep = 0;
$package = 0;

while ($i<$#ARGV+1) {
  if ($ARGV[$i] eq "-d") {
    #
    # Dependency
    #
    $i++;
    if ($i<$#ARGV+1) {
      $dep[$nDep] = $ARGV[$i];
      $nDep++;
      $i++;
    } else {
      die "Usage: packageCreate <packageName> -d dependency -dd docDependency \n";
    }
  }
  elsif ($ARGV[$i] eq "-dd") {
    #
    # Documentation Dependency
    #
    $i++;
    if ($i<$#ARGV+1) {
      $docDep[$nDocDep] = $ARGV[$i];
      $nDocDep++;
      $i++;
    } else {
      die "Usage: packageCreate <packageName> -d dependency -dd docDependency \n";
    }
  }
  elsif ($ARGV[$i] eq "--help") {
    print "packageCreate <packageName> -d dependency -dd docDependency
  create a cmake managed package with unitTesting and documentation.

  -d dependency
     defines a compilation dependency from this package to package dependency.
     Package dependency should be installed and accessible from pkg-config.

  -dd docDependency
     defines a documentation dependency from this package to package docDependency. 
     Documentation dependencies are handled by doxygen to track class inheritance between packages.
     Package docDependency should be installed and accessible from pkg-config.\n";
    exit;
  }
  else {
    if (!$package) {
      $package = $ARGV[$i];
      $i++;
    } else {
      die "Usage: packageCreate <packageName> -d package PACKAGE \n -dd package PACKAGE";
    }
  }
}

if (!$package) {
  die "Usage: packageCreate <packageName> -d dependency -dd docDependency \n";
}

print "Number of dependencies: $nDep \n";
for ($i=0; $i<$nDep; $i++) {
  print "  dependence $i: $dep[$i]\n";
}
print "Number of documentation dependencies: $nDocDep \n";
for ($i=0; $i<$nDocDep; $i++) {
  print "  doc dependency $i: $docDep[$i]\n";
}
print "package name: $package\n";

mkdir "$package";
mkdir "$package/include";
mkdir "$package/include/$package";
mkdir "$package/src";
mkdir "$package/doc";
mkdir "$package/doc/additionalDoc";
mkdir "$package/doc/figures";
mkdir "$package/doc/pictures";
mkdir "$package/unitTesting";

#
#  package.pc.cmake
#

open(OUTPUT, ">"."$package\/$package".".pc.cmake") or
  die "Cannot open output file $package/ \n";

print OUTPUT "prefix=\${CMAKE_INSTALL_PREFIX}\n";
print OUTPUT "exec_prefix=\${install_pkg_prefix}\n";
print OUTPUT "libdir=\${install_pkg_exec_prefix}/lib\n";
print OUTPUT "includedir=\${install_pkg_prefix}/include\n";
print OUTPUT "datarootdir=\${install_pkg_prefix}/share\n";
print OUTPUT "docdir=\${install_pkg_datarootdir}/doc/\${PROJECT_NAME}\n";
print OUTPUT "\n";
print OUTPUT "Name: \${PROJECT_NAME}\n";
print OUTPUT "Description: \n";
print OUTPUT "Version: \${PROJECT_VERSION}\n";
print OUTPUT "Requires: \${PACKAGE_REQUIREMENTS}\n";
print OUTPUT "Libs: \${LIBDIR_KW}\${install_pkg_libdir} \${\${PROJECT_NAME}_LDFLAGS}\n";
print OUTPUT "Cflags: -I\${install_pkg_include_dir} \${\${PROJECT_NAME}_CXXFLAGS}\n";

close(OUTPUT);

#
#  autogen.sh
#

open(OUTPUT, ">"."$package/autogen.sh") or
  die "Cannot open output file $package/autogen.sh \n";

print OUTPUT "echo \"\"\n";
print OUTPUT "echo \"This package is installed through cmake. Please read INSTALL for instructions.\"\n";
print OUTPUT "echo \"\"\n";

close(OUTPUT);
system "chmod 775 $package/autogen.sh";

#
# CMakeLists.txt
#

open(OUTPUT, ">"."$package/CMakeLists.txt") or
  die "Cannot open output file $package/CMakeLists.txt \n";

print OUTPUT "#\n";
print OUTPUT "#  Copyright\n";
print OUTPUT "#\n";
print OUTPUT "\n";
print OUTPUT "CMAKE_MINIMUM_REQUIRED(VERSION 2.6)\n";
print OUTPUT "\n";
print OUTPUT "SET(PROJECT_NAME $package)\n";
print OUTPUT "project(\${PROJECT_NAME})\n";
print OUTPUT "\n";
print OUTPUT "SET(PROJECT_VERSION 1.0)\n";
print OUTPUT "\n";
print OUTPUT "SET(CMAKE_VERBOSE_MAKEFILE true)\n";
print OUTPUT "\n";
print OUTPUT "IF(WIN32)\n";
print OUTPUT "  SET(LIBDIR_KW \"/LIBPATH:\")\n";
print OUTPUT "  SET(LIBINCL_KW \"\")\n";
print OUTPUT "  SET(LIB_EXT \".lib\")\n";
print OUTPUT "ENDIF(WIN32)\n";
print OUTPUT "\n";
print OUTPUT "IF(UNIX)\n";
print OUTPUT "  SET(LIBDIR_KW \"-L\")\n";
print OUTPUT "  SET(LIBINCL_KW \"-l\")\n";
print OUTPUT "  SET(LIB_EXT \"\")\n";
print OUTPUT "ENDIF(UNIX)\n";
print OUTPUT "\n";
print OUTPUT "#\n";
print OUTPUT "# Look for dependencies\n";
print OUTPUT "#\n";
print OUTPUT "\n";
print OUTPUT "# Load Pkgconfig macros\n";
print OUTPUT "INCLUDE(FindPkgConfig)\n";
print OUTPUT "SET(PACKAGE_REQUIREMENTS \"\")\n";
for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "\n";
  print OUTPUT "#\n";
  print OUTPUT "#  Dependency to package ".$dep[$iDep]."\n";
  print OUTPUT "#\n";
  print OUTPUT "SET(_".$dep[$iDep]."_FOUND 0)\n";
  print OUTPUT "SET(_".$dep[$iDep]."_REQUIRED \"".$dep[$iDep]." >= 1.0\")\n";
  print OUTPUT "PKG_CHECK_MODULES(_".$dep[$iDep]." REQUIRED \${_".$dep[$iDep]."_REQUIRED})\n";
  print OUTPUT "EXEC_PROGRAM(\${PKG_CONFIG_EXECUTABLE} ARGS  --variable=docdir ".$dep[$iDep]."\n";
  print OUTPUT "  OUTPUT_VARIABLE _".$dep[$iDep]."_DOCDIR)\n";
  print OUTPUT "MESSAGE(STATUS \"pkg-config: \${PKG_CONFIG_EXECUTABLE}\")\n";
  print OUTPUT "MESSAGE(STATUS \"_".$dep[$iDep]."_DOCDIR=\${_".$dep[$iDep]."_DOCDIR}\")\n";
  print OUTPUT "SET(_".$dep[$iDep]."_FOUND 1)\n";
  print OUTPUT "\n";
  print OUTPUT "IF(NOT \${_".$dep[$iDep]."_FOUND})\n";
  print OUTPUT "  MESSAGE(FATAL_ERROR \"Check that package ".$dep[$iDep]." is installed in a directory pointed out by PKG_CONFIG_PATH.\")\n";
  print OUTPUT "ENDIF(NOT \${_".$dep[$iDep]."_FOUND})\n";
  print OUTPUT "  \n";
  print OUTPUT "IF(PACKAGE_REQUIREMENTS STREQUAL \"\")\n";
  print OUTPUT "  SET(PACKAGE_REQUIREMENTS \${_".$dep[$iDep]."_REQUIRED})\n";
  print OUTPUT "ELSE(PACKAGE_REQUIREMENTS STREQUAL \"\")\n";
  print OUTPUT "  SET(PACKAGE_REQUIREMENTS \"\${PACKAGE_REQUIREMENTS}, \${_".$dep[$iDep]."_REQUIRED}\")\n";
  print OUTPUT "ENDIF(PACKAGE_REQUIREMENTS STREQUAL \"\")\n";
  print OUTPUT "\n";
}
for ($iDep=0; $iDep<$nDocDep; $iDep++) {
  print OUTPUT "\n";
  print OUTPUT "#\n";
  print OUTPUT "#  Documentation dependency to package ".$docDep[$iDep]."\n";
  print OUTPUT "#\n";
  print OUTPUT "SET(_".$docDep[$iDep]."_FOUND 0)\n";
  print OUTPUT "SET(_".$docDep[$iDep]."_REQUIRED \"".$docDep[$iDep]." >= 1.0\")\n";
  print OUTPUT "PKG_CHECK_MODULES(_".$docDep[$iDep]." REQUIRED \${_".$docDep[$iDep]."_REQUIRED})\n";
  print OUTPUT "EXEC_PROGRAM(\${PKG_CONFIG_EXECUTABLE} ARGS  --variable=docdir ".$docDep[$iDep]."\n";
  print OUTPUT "  OUTPUT_VARIABLE _".$docDep[$iDep]."_DOCDIR)\n";
  print OUTPUT "MESSAGE(STATUS \"pkg-config: \${PKG_CONFIG_EXECUTABLE}\")\n";
  print OUTPUT "MESSAGE(STATUS \"_".$docDep[$iDep]."_DOCDIR=\${_".$docDep[$iDep]."_DOCDIR}\")\n";
  print OUTPUT "SET(_".$docDep[$iDep]."_FOUND 1)\n";
  print OUTPUT "\n";
  print OUTPUT "IF(NOT \${_".$docDep[$iDep]."_FOUND})\n";
  print OUTPUT "  MESSAGE(FATAL_ERROR \"Check that package ".$docDep[$iDep]." is installed in a directory pointed out by PKG_CONFIG_PATH.\")\n";
  print OUTPUT "ENDIF(NOT \${_".$docDep[$iDep]."_FOUND})\n";
  print OUTPUT "  \n";
}
print OUTPUT "#\n";
print OUTPUT "# pkg-config file\n";
print OUTPUT "#\n";
print OUTPUT "\n";
print OUTPUT "SET(install_pkg_prefix \"\\\${prefix}\")\n";
print OUTPUT "SET(install_pkg_exec_prefix \"\\\${exec_prefix}\")\n";
print OUTPUT "SET(install_pkg_libdir \"\\\${libdir}\")\n";
print OUTPUT "SET(install_pkg_datarootdir \"\\\${datarootdir}\")\n";
print OUTPUT "SET(install_pkg_include_dir \"\\\${includedir}\")\n";
print OUTPUT "\n";
print OUTPUT "IF(UNIX)\n";
print OUTPUT "  SET (\${PROJECT_NAME}_LDFLAGS \"-Wl,-R\${install_pkg_libdir} \${LIBINCL_KW}\${PROJECT_NAME}\${LIB_EXT} \${\${PROJECT_NAME}_LDFLAGS}\")\n";
print OUTPUT "ENDIF(UNIX)\n";
print OUTPUT "\n";
print OUTPUT "IF(WIN32)\n";
print OUTPUT "  SET (\${PROJECT_NAME}_LDFLAGS \"\${LIBINCL_KW}\${PROJECT_NAME}\${LIB_EXT} \${\${PROJECT_NAME}_LDFLAGS}\")\n";
print OUTPUT "ENDIF(WIN32)\n";
print OUTPUT "\n";

print OUTPUT "# Install the file in the appropriate place.\n";
print OUTPUT "SET(install_libdir_pkgconfig \${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)\n";
print OUTPUT "\n";
print OUTPUT "CONFIGURE_FILE(\${CMAKE_CURRENT_SOURCE_DIR}/\${PROJECT_NAME}.pc.cmake\n";
print OUTPUT "  \${CMAKE_CURRENT_BINARY_DIR}/\${PROJECT_NAME}.pc)\n";
print OUTPUT "\n";
print OUTPUT "INSTALL(FILES \${CMAKE_CURRENT_BINARY_DIR}/\${PROJECT_NAME}.pc\n";
print OUTPUT "  DESTINATION \${install_libdir_pkgconfig}	\n";
print OUTPUT "  PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE)\n";
print OUTPUT "\n";
print OUTPUT "ADD_SUBDIRECTORY(src)\n";
print OUTPUT "ADD_SUBDIRECTORY(include)\n";
print OUTPUT "ADD_SUBDIRECTORY(unitTesting)\n";
print OUTPUT "\n";
print OUTPUT "#\n";
print OUTPUT "# Documentation produced by doxygen\n";
print OUTPUT "#\n";
print OUTPUT "INCLUDE(FindDoxygen)\n";
print OUTPUT "IF(DOXYGEN_FOUND)\n";
print OUTPUT "  add_subdirectory(doc)\n";
print OUTPUT "ENDIF(DOXYGEN_FOUND)\n";

#
#  include/CMakeLists.txt
#

open(OUTPUT, ">"."$package\/include\/CMakeLists.txt") or
  die "Cannot open output file $package\/include\/$package\/CMakeLists.txt \n";

print OUTPUT "# \n";
print OUTPUT "#  Copyright \n";
print OUTPUT "# \n";
print OUTPUT "\n";
print OUTPUT "SET(\${PROJECT_NAME}_HEADERS\n";
print OUTPUT "$package.h\n";
print OUTPUT "$package-API.h\n";
print OUTPUT ")\n";
print OUTPUT "\n";
print OUTPUT "# Recreate correct path for the headers\n";
print OUTPUT "#--------------------------------------\n";
print OUTPUT "\n";
print OUTPUT "SET(fullpath_\${PROJECT_NAME}_HEADERS)\n";
print OUTPUT "FOREACH(lHeader \${\${PROJECT_NAME}_HEADERS})\n";
print OUTPUT "  SET(fullpath_\${PROJECT_NAME}_HEADERS \n";
print OUTPUT "    \${fullpath_\${PROJECT_NAME}_HEADERS}\n";
print OUTPUT "    ./\${PROJECT_NAME}/\${lHeader}\n";
print OUTPUT "  )\n";
print OUTPUT "\n";
print OUTPUT "ENDFOREACH(lHeader)\n";
print OUTPUT "\n";
print OUTPUT "#----------------------------------------------------\n";
print OUTPUT "# Install procedure for the header files\n";
print OUTPUT "#----------------------------------------------------\n";
print OUTPUT "INSTALL(FILES \${fullpath_\${PROJECT_NAME}_HEADERS}\n";
print OUTPUT "	DESTINATION \${CMAKE_INSTALL_PREFIX}/include/\${PROJECT_NAME}\n";
print OUTPUT "        PERMISSIONS OWNER_READ GROUP_READ WORLD_READ OWNER_WRITE\n";
print OUTPUT ")\n";

close(OUTPUT);

#
#  src/CMakeLists.txt
#

open(OUTPUT, ">"."$package\/src\/CMakeLists.txt") or
  die "Cannot open output file $package\/src\/CMakeLists.txt \n";

print OUTPUT "# \n";
print OUTPUT "#  Copyright \n";
print OUTPUT "# \n";
print OUTPUT "\n";
print OUTPUT "SET(LIBRARY_NAME \${PROJECT_NAME})\n";
print OUTPUT "\n";
print OUTPUT "INCLUDE_DIRECTORIES(\${CMAKE_SOURCE_DIR}/include)\n";
print OUTPUT "\n";
print OUTPUT "ADD_DEFINITIONS(-DDEBUG=2)\n";
for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "\n";
  print OUTPUT "# provide path to library lib".$dep[$iDep].".so\n";
  print OUTPUT "LINK_DIRECTORIES(\${_".$dep[$iDep]."_LIBRARY_DIRS})\n";
  print OUTPUT "\n";
}
print OUTPUT "ADD_LIBRARY(\${LIBRARY_NAME} \n";
print OUTPUT "  SHARED\n";
print OUTPUT "  $package.cpp)\n";
print OUTPUT "\n";
print OUTPUT "SET_TARGET_PROPERTIES(\${LIBRARY_NAME} \n";
print OUTPUT "  PROPERTIES \n";
print OUTPUT "  SOVERSION \${PROJECT_VERSION}\n";
print OUTPUT "  INSTALL_RPATH \${CMAKE_INSTALL_PREFIX}/lib)\n";
print OUTPUT "\n";

print OUTPUT "SET_TARGET_PROPERTIES(\${PROJECT_NAME_LIB}\n";
print OUTPUT "  PROPERTIES\n";
print OUTPUT "  COMPILE_FLAGS \${\${PROJECT_NAME}_src_CXXFLAGS}\n";
print OUTPUT "  LINK_FLAGS \${\${PROJECT_NAME}_src_LDFLAGS}\n";
print OUTPUT ")\n";
print OUTPUT "\n";

for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "# Add ".$dep[$iDep]." compilation flags and link to library lib".$dep[$iDep].".so\n";
  print OUTPUT "ADD_DEFINITIONS(\${_".$dep[$iDep]."_CFLAGS})\n";
  print OUTPUT "IF(UNIX)\n";
  print OUTPUT "TARGET_LINK_LIBRARIES(\${LIBRARY_NAME} \${_".$dep[$iDep]."_LIBRARIES})\n";
  print OUTPUT "ENDIF(UNIX)\n";
  print OUTPUT "\n";
  print OUTPUT "IF(WIN32)\n";
  print OUTPUT "foreach(dlink \${_".$dep[$iDep]."_LDFLAGS})\n";
  print OUTPUT "	SET ( \${PROJECT_NAME}_src_LDFLAGS \"\${\${PROJECT_NAME}_src_LDFLAGS}  \${dlink}\")\n";
  print OUTPUT "endforeach(dlink)\n";
  print OUTPUT "ENDIF(WIN32)\n";
  print OUTPUT "\n";
}

print OUTPUT "SET_TARGET_PROPERTIES(\${LIBRARY_NAME}\n";
print OUTPUT "  PROPERTIES\n";
print OUTPUT "  LINK_FLAGS \"\${\${PROJECT_NAME}_src_LDFLAGS}\"\n";
print OUTPUT ")\n";
print OUTPUT "\n";
print OUTPUT "INSTALL(TARGETS \${LIBRARY_NAME}\n";
print OUTPUT "  DESTINATION \${CMAKE_INSTALL_PREFIX}/lib)\n";

close(OUTPUT);

#
#  doc/CMakeLists.txt
#

open(OUTPUT, ">"."$package\/doc\/CMakeLists.txt") or
  die "Cannot open output file $package\/doc\/CMakeLists.txt \n";


print OUTPUT "# \n";
print OUTPUT "#  Copyright \n";
print OUTPUT "# \n";
print OUTPUT "\n";
print OUTPUT "# Configure package.dox file\n";
print OUTPUT "CONFIGURE_FILE(\${CMAKE_CURRENT_SOURCE_DIR}/package.dox.cmake\n";
print OUTPUT "  \${CMAKE_CURRENT_BINARY_DIR}/package.dox\n";
print OUTPUT ")\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "ADD_CUSTOM_COMMAND(OUTPUT \${CMAKE_CURRENT_BINARY_DIR}/html/index.html\n";
print OUTPUT "  COMMAND \${DOXYGEN_EXECUTABLE} \\\"\${CMAKE_CURRENT_BINARY_DIR}/package.dox\\\"\n";
print OUTPUT ")\n";
print OUTPUT "\n";
print OUTPUT "ADD_CUSTOM_TARGET(documentation ALL\n";
print OUTPUT "  DEPENDS \${CMAKE_CURRENT_BINARY_DIR}/html/index.html)\n";
print OUTPUT "\n";
print OUTPUT "#\n";
print OUTPUT "# Install html documentation\n";
print OUTPUT "#\n";
print OUTPUT "\n";
print OUTPUT "# html files\n";
print OUTPUT "INSTALL(DIRECTORY \${CMAKE_CURRENT_BINARY_DIR}/html\n";
print OUTPUT "  DESTINATION \${CMAKE_INSTALL_PREFIX}/share/doc/\${PROJECT_NAME})\n";
print OUTPUT "\n";
print OUTPUT "# doxytag\n";
print OUTPUT "INSTALL(FILES \${CMAKE_CURRENT_BINARY_DIR}/\${PROJECT_NAME}.doxytag\n";
print OUTPUT "  DESTINATION \${CMAKE_INSTALL_PREFIX}/share/doc/\${PROJECT_NAME}/html)\n";
print OUTPUT "\n";
print OUTPUT "# pictures\n";
print OUTPUT "INSTALL(DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR}/pictures\n";
print OUTPUT "  DESTINATION \${CMAKE_INSTALL_PREFIX}/share/doc/\${PROJECT_NAME}/html)\n";

close(OUTPUT);

#
#  doc/package.dox.cmake
#

open(OUTPUT, ">"."$package\/doc\/package.dox.cmake") or
  die "Cannot open output file $package\/doc\/package.dox.cmake \n";

print OUTPUT "# Doxyfile 1.4.2\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Project related configuration options\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "OUTPUT_DIRECTORY       = .\n";
print OUTPUT "CREATE_SUBDIRS         = NO\n";
print OUTPUT "OUTPUT_LANGUAGE        = English\n";
print OUTPUT "BRIEF_MEMBER_DESC      = YES\n";
print OUTPUT "REPEAT_BRIEF           = YES\n";
print OUTPUT "ABBREVIATE_BRIEF       = \"The \$name class\" \\\n";
print OUTPUT "                         \"The \$name widget\" \\\n";
print OUTPUT "                         \"The \$name file\" \\\n";
print OUTPUT "                         is \\\n";
print OUTPUT "                         provides \\\n";
print OUTPUT "                         specifies \\\n";
print OUTPUT "                         contains \\\n";
print OUTPUT "                         represents \\\n";
print OUTPUT "                         a \\\n";
print OUTPUT "                         an \\\n";
print OUTPUT "                         the\n";
print OUTPUT "ALWAYS_DETAILED_SEC    = YES\n";
print OUTPUT "INLINE_INHERITED_MEMB  = NO\n";
print OUTPUT "FULL_PATH_NAMES        = NO\n";
print OUTPUT "STRIP_FROM_PATH        = \n";
print OUTPUT "STRIP_FROM_INC_PATH    = \n";
print OUTPUT "SHORT_NAMES            = NO\n";
print OUTPUT "JAVADOC_AUTOBRIEF      = YES\n";
print OUTPUT "MULTILINE_CPP_IS_BRIEF = NO\n";
print OUTPUT "DETAILS_AT_TOP         = YES\n";
print OUTPUT "INHERIT_DOCS           = YES\n";
print OUTPUT "DISTRIBUTE_GROUP_DOC   = NO\n";
print OUTPUT "SEPARATE_MEMBER_PAGES  = NO\n";
print OUTPUT "TAB_SIZE               = 2\n";
print OUTPUT "OPTIMIZE_OUTPUT_FOR_C  = NO\n";
print OUTPUT "OPTIMIZE_OUTPUT_JAVA   = NO\n";
print OUTPUT "SUBGROUPING            = YES\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Build related configuration options\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "EXTRACT_LOCAL_CLASSES  = YES\n";
print OUTPUT "EXTRACT_LOCAL_METHODS  = NO\n";
print OUTPUT "CASE_SENSE_NAMES       = NO\n";
print OUTPUT "HIDE_SCOPE_NAMES       = NO\n";
print OUTPUT "SHOW_INCLUDE_FILES     = NO\n";
print OUTPUT "INLINE_INFO            = YES\n";
print OUTPUT "SORT_MEMBER_DOCS       = YES\n";
print OUTPUT "SORT_BRIEF_DOCS        = NO\n";
print OUTPUT "SORT_BY_SCOPE_NAME     = NO\n";
print OUTPUT "MAX_INITIALIZER_LINES  = 30\n";
print OUTPUT "FILE_VERSION_FILTER    = \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to warning and progress messages\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "QUIET                  = NO\n";
print OUTPUT "WARNINGS               = YES\n";
print OUTPUT "WARN_IF_UNDOCUMENTED   = YES\n";
print OUTPUT "WARN_IF_DOC_ERROR      = YES\n";
print OUTPUT "WARN_NO_PARAMDOC       = NO\n";
print OUTPUT "WARN_FORMAT            = \"\$file:\$line: \$text\"\n";
print OUTPUT "WARN_LOGFILE           = \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the input files\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "RECURSIVE              = YES\n";
print OUTPUT "EXCLUDE                = \n";
print OUTPUT "EXCLUDE_SYMLINKS       = NO\n";
print OUTPUT "EXAMPLE_PATH           = \n";
print OUTPUT "EXAMPLE_PATTERNS       = *\n";
print OUTPUT "EXAMPLE_RECURSIVE      = NO\n";
print OUTPUT "INPUT_FILTER           = \n";
print OUTPUT "FILTER_PATTERNS        = \n";
print OUTPUT "FILTER_SOURCE_FILES    = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to source browsing\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the alphabetical class index\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "ALPHABETICAL_INDEX     = NO\n";
print OUTPUT "COLS_IN_ALPHA_INDEX    = 5\n";
print OUTPUT "IGNORE_PREFIX          = \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the HTML output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_HTML          = YES\n";
print OUTPUT "HTML_FILE_EXTENSION    = .html\n";
print OUTPUT "HTML_ALIGN_MEMBERS     = YES\n";
print OUTPUT "GENERATE_HTMLHELP      = NO\n";
print OUTPUT "CHM_FILE               = \n";
print OUTPUT "HHC_LOCATION           = \n";
print OUTPUT "GENERATE_CHI           = NO\n";
print OUTPUT "BINARY_TOC             = NO\n";
print OUTPUT "TOC_EXPAND             = YES\n";
print OUTPUT "DISABLE_INDEX          = NO\n";
print OUTPUT "ENUM_VALUES_PER_LINE   = 1\n";
print OUTPUT "GENERATE_TREEVIEW      = YES\n";
print OUTPUT "TREEVIEW_WIDTH         = 250\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the LaTeX output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "LATEX_OUTPUT           = latex\n";
print OUTPUT "LATEX_CMD_NAME         = latex\n";
print OUTPUT "MAKEINDEX_CMD_NAME     = makeindex\n";
print OUTPUT "COMPACT_LATEX          = NO\n";
print OUTPUT "PAPER_TYPE             = a4wide\n";
print OUTPUT "EXTRA_PACKAGES         = \n";
print OUTPUT "LATEX_HEADER           = \n";
print OUTPUT "PDF_HYPERLINKS         = NO\n";
print OUTPUT "USE_PDFLATEX           = NO\n";
print OUTPUT "LATEX_BATCHMODE        = NO\n";
print OUTPUT "LATEX_HIDE_INDICES     = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the RTF output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "RTF_OUTPUT             = rtf\n";
print OUTPUT "COMPACT_RTF            = NO\n";
print OUTPUT "RTF_HYPERLINKS         = NO\n";
print OUTPUT "RTF_STYLESHEET_FILE    = \n";
print OUTPUT "RTF_EXTENSIONS_FILE    = \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the man page output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "MAN_OUTPUT             = man\n";
print OUTPUT "MAN_EXTENSION          = .3\n";
print OUTPUT "MAN_LINKS              = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the XML output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "XML_OUTPUT             = xml\n";
print OUTPUT "XML_SCHEMA             = \n";
print OUTPUT "XML_DTD                = \n";
print OUTPUT "XML_PROGRAMLISTING     = YES\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options for the AutoGen Definitions output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_AUTOGEN_DEF   = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the Perl module output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "PERLMOD_LATEX          = NO\n";
print OUTPUT "PERLMOD_PRETTY         = YES\n";
print OUTPUT "PERLMOD_MAKEVAR_PREFIX = \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration options related to the preprocessor   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "ENABLE_PREPROCESSING   = YES\n";
print OUTPUT "MACRO_EXPANSION        = YES\n";
print OUTPUT "EXPAND_ONLY_PREDEF     = YES\n";
print OUTPUT "SEARCH_INCLUDES        = YES\n";
print OUTPUT "INCLUDE_PATH           = \n";
print OUTPUT "INCLUDE_FILE_PATTERNS  = \n";
print OUTPUT "EXPAND_AS_DEFINED      = \n";
print OUTPUT "SKIP_FUNCTION_MACROS   = YES\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration::additions related to external references   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "TAGFILES               = \\\n";
for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "\t\${_".$dep[$iDep]."_DOCDIR}/html/".$dep[$iDep].".doxytag=\${_".$dep[$iDep]."_DOCDIR}/html";
  if ($iDep != $nDep-1 || $nDocDep != 0) {
    print OUTPUT " \\\n";
  }
}
for ($iDep=0; $iDep<$nDocDep; $iDep++) {
  print OUTPUT "\t\${_".$docDep[$iDep]."_DOCDIR}/html/".$docDep[$iDep].".doxytag=\${_".$docDep[$iDep]."_DOCDIR}/html";
  if ($iDep != $nDocDep-1) {
    print OUTPUT " \\\n";
  }
}
print OUTPUT "\n";
print OUTPUT "GENERATE_TAGFILE       = $package.doxytag\n";
print OUTPUT "ALLEXTERNALS           = NO\n";
print OUTPUT "EXTERNAL_GROUPS        = YES\n";
print OUTPUT "PERL_PATH              = /usr/bin/perl\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration options related to the dot tool   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration::additions related to the search engine   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "SEARCHENGINE           = NO\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Project related configuration options\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "PROJECT_NAME           = \"\${PROJECT_NAME} library documentation\"\n";
print OUTPUT "PROJECT_NUMBER         = \${PROJECT_VERSION}\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Build related configuration options\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "EXTRACT_ALL            = YES\n";
print OUTPUT "EXTRACT_PRIVATE        = YES\n";
print OUTPUT "EXTRACT_STATIC         = NO\n";
print OUTPUT "HIDE_UNDOC_MEMBERS     = YES\n";
print OUTPUT "HIDE_UNDOC_CLASSES     = YES\n";
print OUTPUT "HIDE_FRIEND_COMPOUNDS  = YES\n";
print OUTPUT "HIDE_IN_BODY_DOCS      = NO\n";
print OUTPUT "INTERNAL_DOCS          = NO\n";
print OUTPUT "SHOW_INCLUDE_FILES     = NO\n";
print OUTPUT "GENERATE_TODOLIST      = YES\n";
print OUTPUT "GENERATE_TESTLIST      = NO\n";
print OUTPUT "GENERATE_BUGLIST       = NO\n";
print OUTPUT "GENERATE_DEPRECATEDLIST= YES\n";
print OUTPUT "ENABLED_SECTIONS       = \n";
print OUTPUT "SHOW_USED_FILES        = NO\n";
print OUTPUT "SHOW_DIRECTORIES       = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to warning and progress messages\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the input files\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "FILE_PATTERNS          = *.h *.idl\n";
print OUTPUT "EXCLUDE_PATTERNS       = \n";
print OUTPUT "INPUT                  = \${\${PROJECT_NAME}_SOURCE_DIR}/include \\\n";
print OUTPUT "                         \${CMAKE_CURRENT_SOURCE_DIR}/additionalDoc\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to inserting images\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "IMAGE_PATH = \${\${PROJECT_NAME}_SOURCE_DIR}/doc/figures\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to source browsing\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "SOURCE_BROWSER         = NO\n";
print OUTPUT "INLINE_SOURCES         = NO\n";
print OUTPUT "STRIP_CODE_COMMENTS    = YES\n";
print OUTPUT "REFERENCED_BY_RELATION = NO\n";
print OUTPUT "REFERENCES_RELATION    = NO\n";
print OUTPUT "VERBATIM_HEADERS       = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the alphabetical class index\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the HTML output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "HTML_OUTPUT            = html\n";
print OUTPUT "HTML_STYLESHEET        = \${CMAKE_CURRENT_SOURCE_DIR}/package.css\n";
print OUTPUT "HTML_HEADER            = \${CMAKE_CURRENT_SOURCE_DIR}/header.html\n";
print OUTPUT "HTML_FOOTER            = \${CMAKE_CURRENT_SOURCE_DIR}/footer.html\n";
print OUTPUT "\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the LaTeX output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_LATEX         = NO\n";
print OUTPUT "USE_PDFLATEX           = YES\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the RTF output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_RTF           = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the man page output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_MAN           = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the XML output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_XML           = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options for the AutoGen Definitions output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_AUTOGEN_DEF   = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# configuration options related to the Perl module output\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "GENERATE_PERLMOD       = NO\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration options related to the preprocessor   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration::additions related to external references   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "# Configuration options related to the dot tool   \n";
print OUTPUT "#---------------------------------------------------------------------------\n";
print OUTPUT "CLASS_DIAGRAMS         = YES\n";
print OUTPUT "HIDE_UNDOC_RELATIONS   = YES\n";
print OUTPUT "HAVE_DOT               = YES\n";
print OUTPUT "CLASS_GRAPH            = NO\n";
print OUTPUT "COLLABORATION_GRAPH    = YES\n";
print OUTPUT "GROUP_GRAPHS           = YES\n";
print OUTPUT "UML_LOOK               = NO\n";
print OUTPUT "TEMPLATE_RELATIONS     = NO\n";
print OUTPUT "INCLUDE_GRAPH          = YES\n";
print OUTPUT "INCLUDED_BY_GRAPH      = YES\n";
print OUTPUT "CALL_GRAPH             = NO\n";
print OUTPUT "GRAPHICAL_HIERARCHY    = YES\n";
print OUTPUT "DIRECTORY_GRAPH        = YES\n";
print OUTPUT "DOT_IMAGE_FORMAT       = png\n";
print OUTPUT "DOT_PATH               = \n";
print OUTPUT "DOTFILE_DIRS           = \n";
print OUTPUT "MAX_DOT_GRAPH_DEPTH    = 1000\n";
print OUTPUT "DOT_TRANSPARENT        = NO\n";
print OUTPUT "DOT_MULTI_TARGETS      = YES\n";
print OUTPUT "GENERATE_LEGEND        = YES\n";
print OUTPUT "DOT_CLEANUP            = YES\n";

close(OUTPUT);

#
#  doc/package.css
#

open(OUTPUT, ">"."$package\/doc\/package.css") or
  die "Cannot open output file $package\/doc\/package.css \n";

print OUTPUT "body {\n";
print OUTPUT "    font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "    color: \#5D5D5D;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "dl {\n";
print OUTPUT "    border: 1.5px \#82b6d7 solid;\n";
print OUTPUT "    width: 97%;\n";
print OUTPUT "    padding: 5px;\n";
print OUTPUT "    color: \#330077;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "code {\n";
print OUTPUT "    color: \#3C9A35;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "td.md {\n";
print OUTPUT "    color: \#0066CC;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "h1 {\n";
print OUTPUT "    padding-top: 50px;\n";
print OUTPUT "    padding: 0px;\n";
print OUTPUT "    font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "    font-variant: small-caps;\n";
print OUTPUT "    color:\#0066CC;\n";
print OUTPUT "    text-align: center;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "h2,h3,hr {\n";
print OUTPUT "    magin-top: 15px;\n";
print OUTPUT "    padding: 0px;\n";
print OUTPUT "    font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "    font-variant: small-caps;\n";
print OUTPUT "    color:\#0066CC;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "h4 {\n";
print OUTPUT "    color: \#3C9A35;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "a:link {\n";
print OUTPUT "    font-weight: bold;\n";
print OUTPUT "    text-decoration: none;\n";
print OUTPUT "    color:\#0066CC\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "a:hover, a:active { \n";
print OUTPUT "	text-decoration: underline; \n";
print OUTPUT "	color: \#3C9A35;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "a:visited {\n";
print OUTPUT "    font-weight: bold;\n";
print OUTPUT "    color: \#3C9A35;\n";
print OUTPUT "    text-decoration: none;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.memitem\n";
print OUTPUT "{ \n";
print OUTPUT "  spacing: 10px;\n";
print OUTPUT "  width:100%;\n";
print OUTPUT "  background:\#FFFFFF;\n";
print OUTPUT "  font-size:100%;\n";
print OUTPUT "  line-height:normal;\n";
print OUTPUT "  border-width: 1px;\n";
print OUTPUT "  border-style: solid;\n";
print OUTPUT "  border-color: \#808080;\n";
print OUTPUT "  -moz-border-radius: 8px 8px 8px 8px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.memproto\n";
print OUTPUT "{ \n";
print OUTPUT "  width:100%;\n";
print OUTPUT "  background:\#F0F0F0;\n";
print OUTPUT "  font-size:100%;\n";
print OUTPUT "  line-height:normal;\n";
print OUTPUT "  border-width: 1px;\n";
print OUTPUT "  border-style: solid;\n";
print OUTPUT "  border-color: \#808080;\n";
print OUTPUT "  -moz-border-radius: 8px 8px 8px 8px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.memdoc\n";
print OUTPUT "{ \n";
print OUTPUT "  padding: 10px;\n";
print OUTPUT "  width:100%;\n";
print OUTPUT "  font-size:100%;\n";
print OUTPUT "  line-height:normal;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs\n";
print OUTPUT "{\n";
print OUTPUT "   float            : left;\n";
print OUTPUT "   width            : 100%;\n";
print OUTPUT "   background       : url(\"tab_b.gif\") repeat-x bottom;\n";
print OUTPUT "   margin-bottom    : 4px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs UL\n";
print OUTPUT "{\n";
print OUTPUT "   margin           : 0px;\n";
print OUTPUT "   padding-left     : 10px;\n";
print OUTPUT "   list-style       : none;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs LI, DIV.tabs FORM\n";
print OUTPUT "{\n";
print OUTPUT "   display          : inline;\n";
print OUTPUT "   margin           : 0px;\n";
print OUTPUT "   padding          : 0px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs FORM\n";
print OUTPUT "{\n";
print OUTPUT "   float            : right;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs A\n";
print OUTPUT "{\n";
print OUTPUT "   float            : left;\n";
print OUTPUT "   background       : url(\"tab_r.gif\") no-repeat right top;\n";
print OUTPUT "   border-bottom    : 1px solid \#84B0C7;\n";
print OUTPUT "   font-size        : x-small;\n";
print OUTPUT "   font-weight      : bold;\n";
print OUTPUT "   text-decoration  : none;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs A:hover\n";
print OUTPUT "{\n";
print OUTPUT "   background-position: 100% -150px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs A:link, DIV.tabs A:visited,\n";
print OUTPUT "DIV.tabs A:active, DIV.tabs A:hover\n";
print OUTPUT "{\n";
print OUTPUT "       color: \#1A419D;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs SPAN\n";
print OUTPUT "{\n";
print OUTPUT "   float            : left;\n";
print OUTPUT "   display          : block;\n";
print OUTPUT "   background       : url(\"tab_l.gif\") no-repeat left top;\n";
print OUTPUT "   padding          : 5px 9px;\n";
print OUTPUT "   white-space      : nowrap;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs INPUT\n";
print OUTPUT "{\n";
print OUTPUT "   float            : right;\n";
print OUTPUT "   display          : inline;\n";
print OUTPUT "   font-size        : 1em;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs TD\n";
print OUTPUT "{\n";
print OUTPUT "   font-size        : x-small;\n";
print OUTPUT "   font-weight      : bold;\n";
print OUTPUT "   text-decoration  : none;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs SPAN {float : none;}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs A:hover SPAN\n";
print OUTPUT "{\n";
print OUTPUT "   background-position: 0% -150px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs LI\#current A\n";
print OUTPUT "{\n";
print OUTPUT "   background-position: 100% -150px;\n";
print OUTPUT "   border-width     : 0px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.tabs LI\#current SPAN\n";
print OUTPUT "{\n";
print OUTPUT "   background-position: 0% -150px;\n";
print OUTPUT "   padding-bottom   : 6px;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.nav\n";
print OUTPUT "{\n";
print OUTPUT "   background       : none;\n";
print OUTPUT "   border           : none;\n";
print OUTPUT "   border-bottom    : 1px solid \#84B0C7;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "DIV.groupHeader\n";
print OUTPUT "{ \n";
print OUTPUT "  padding-top: 30px;\n";
print OUTPUT "  padding-bottom: 20px;\n";
print OUTPUT "  background       : none;\n";
print OUTPUT "  border           : none;\n";
print OUTPUT "  border-bottom    : 1px solid \#84B0C7;\n";
print OUTPUT "  font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "  font-variant: small-caps;\n";
print OUTPUT "  font-size: 14pt;\n";
print OUTPUT "  color:\#0066CC;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT ".directory p \n";
print OUTPUT "{ \n";
print OUTPUT "    margin: 0px; \n";
print OUTPUT "    white-space: nowrap; \n";
print OUTPUT "    font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "    font-size: 10pt;\n";
print OUTPUT "    font-weight: normal;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT ".directory h3 \n";
print OUTPUT "{ \n";
print OUTPUT "    font-family: \'Lucida Grande\',\'Lucida Sans Unicode\',Verdana,Sans-Serif;\n";
print OUTPUT "    margin: 0px; \n";
print OUTPUT "    margin-top: 1em; \n";
print OUTPUT "    padding-bottom: 20px;\n";
print OUTPUT "    font-size: 12pt; \n";
print OUTPUT "    font-variant: small-caps;\n";
print OUTPUT "    text-align: center;\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT ".directory a:visited {\n";
print OUTPUT "    font-weight: bold;\n";
print OUTPUT "    text-decoration: none;\n";
print OUTPUT "    color:\#0066CC\n";
print OUTPUT "}\n";
print OUTPUT "\n";

close(OUTPUT);

#
#  doc/header.html
#

open(OUTPUT, ">"."$package\/doc\/header.html") or
  die "Cannot open output file $package\/doc\/header.html \n";

print OUTPUT "<HTML>\n";
print OUTPUT "    <HEAD>\n";
print OUTPUT "      <TITLE>$package library documentation<\/TITLE>\n";
print OUTPUT "      <LINK HREF=\"package.css\" REL=\"stylesheet\" TYPE=\"text\/css\">\n";
print OUTPUT "    <\/HEAD>\n";
print OUTPUT "    <BODY>\n";
print OUTPUT "\n";

close(OUTPUT);

#
#  doc/footer.html
#

open(OUTPUT, ">"."$package\/doc\/footer.html") or
  die "Cannot open output file $package\/doc\/footer.html \n";

print OUTPUT " <br><br>\n";
print OUTPUT " <hr>\n";
print OUTPUT " <center>\n";
print OUTPUT " <img src=\".\/pictures\/footer.jpg\" Height=100>\n";
print OUTPUT " <br>$package library documentation<\/br>\n";
print OUTPUT " <\/center>\n";
print OUTPUT " <hr>\n";
print OUTPUT " <\/center>\n";
print OUTPUT " <\/body>\n";
print OUTPUT " <\/head>\n";
print OUTPUT "\n";

close(OUTPUT);

#
#  doc/additionalDoc/package.h
#

open(OUTPUT, ">"."$package\/doc\/additionalDoc\/package.h") or
  die "Cannot open output file  \n";

print OUTPUT "\/\*\*\n";
print OUTPUT "\\mainpage\n";
print OUTPUT "\n";
print OUTPUT "\\section intro_$package Introduction\n";
print OUTPUT "\n";
print OUTPUT "This package implements ...\n";
print OUTPUT "\n";
print OUTPUT "\*\/\n";

close(OUTPUT);

#
#  include/$package/$package.h
#

open(OUTPUT, ">"."$package\/include\/$package\/$package.h") or
  die "Cannot open output file $package\/include\/$package\/$package.h \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#ifndef $package"."_H\n";
print OUTPUT "\#define $package"."_H\n";
print OUTPUT "\n";
print OUTPUT "\#include \"$package-API.h\"\n";
print OUTPUT "\n";
print OUTPUT "\/\*\*\n";
print OUTPUT "  \\brief Main class of package $package\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "class $package"."_EXPORT C$package {\n";
print OUTPUT "public:\n";
print OUTPUT "  C$package();\n";
print OUTPUT "  ~C$package();\n";
print OUTPUT "\n";
print OUTPUT "};\n";
print OUTPUT "\n";
print OUTPUT "\#endif\n";


close(OUTPUT);

#
#  include/$package/$package-API.h
#

open(OUTPUT, ">"."$package\/include\/$package\/$package-API.h") or
  die "Cannot open output file $package\/include\/$package\/$package-API.h \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#ifndef $package"."_API_H\n";
print OUTPUT "\#define $package"."_API_H\n";
print OUTPUT "\n";
print OUTPUT "\#if defined (WIN32)\n";
print OUTPUT "\#  ifdef $package"."_EXPORTS\n";
print OUTPUT "\#    define $package"."_EXPORT __declspec(dllexport)\n";
print OUTPUT "\#  else\n";
print OUTPUT "\#    define $package"."_EXPORT __declspec(dllimport)\n";
print OUTPUT "\#  endif\n";
print OUTPUT "\#else\n";
print OUTPUT "\#  define $package"."_EXPORT\n";
print OUTPUT "\#endif\n";
print OUTPUT "\n";
print OUTPUT "\#endif\n";


close(OUTPUT);


#
#  src/$package.cpp
#

open(OUTPUT, ">"."$package\/src\/$package.cpp") or
  die "Cannot open output file $package\/src\/$package.cpp \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#include <iostream>\n";
print OUTPUT "\#include \"$package\/$package.h\" ";
print OUTPUT "\n";
print OUTPUT "\n";
print OUTPUT "// Select verbosity at configuration by setting CXXFLAGS=\"... -DDEBUG=[1 or 2]\"\n";
print OUTPUT "\#if DEBUG==2\n";
print OUTPUT "\#define ODEBUG2(x) std::cerr << \"$package:\" << x << std::endl\n";
print OUTPUT "\#define ODEBUG1(x) std::cerr << \"$package:\" << x << std::endl\n";
print OUTPUT "\#elif DEBUG==1\n";
print OUTPUT "\#define ODEBUG2(x)\n";
print OUTPUT "\#define ODEBUG1(x) std::cerr << \"$package:\" << x << std::endl\n";
print OUTPUT "\#else\n";
print OUTPUT "\#define ODEBUG2(x)\n";
print OUTPUT "\#define ODEBUG1(x)\n";
print OUTPUT "\#endif\n";
print OUTPUT "\n";
print OUTPUT "C$package\:\:C$package()\n";
print OUTPUT "{\n";
print OUTPUT "  ODEBUG2(\"message of level 2\");\n";
print OUTPUT "  ODEBUG1(\"message of level 1\");\n";
print OUTPUT "}\n";
print OUTPUT "\n";
print OUTPUT "C$package\:\:~C$package()\n";
print OUTPUT "{\n";
print OUTPUT "}\n";

close(OUTPUT);

#
#  INSTALL
#

open(OUTPUT, ">"."$package\/INSTALL") or
  die "Cannot open output file $package\/INSTALL \n";

print OUTPUT "#\n";
print OUTPUT "#  Copyright\n";
print OUTPUT "#\n";
print OUTPUT "\n";
print OUTPUT "Installation instructions for library ".$package."\n";
print OUTPUT "----------------------------------------------\n";
print OUTPUT "\n";
print OUTPUT "It is recommended to create a specific directory to install this package.\n";
print OUTPUT "mkdir build\n";
print OUTPUT "cd build\n";
print OUTPUT "cmake [Options] ..\n";
print OUTPUT "make \n";
print OUTPUT "make install\n";
print OUTPUT "\n";
print OUTPUT "Options:\n";
print OUTPUT "\n";
print OUTPUT "-DCMAKE_INSTALL_PREFIX=...\n";
print OUTPUT "  specifies the directory where to install the package.\n";

close(OUTPUT);

#
#  NEWS
#

open(OUTPUT, ">"."$package\/NEWS") or
  die "Cannot open output file $package\/NEWS \n";

print OUTPUT "Write in this file the news related to package $package.\n";

close(OUTPUT);

#
#  README
#

open(OUTPUT, ">"."$package\/README") or
  die "Cannot open output file $package\/README \n";

print OUTPUT "See INSTALL for installation instruction.\n";

close(OUTPUT);

#
#  ChangeLog
#

open(OUTPUT, ">"."$package\/ChangeLog") or
  die "Cannot open output file $package\/ChangeLog \n";

print OUTPUT "Write in this file the modifications you commit.\n";

close(OUTPUT);

#
#  AUTHORS
#

open(OUTPUT, ">"."$package\/AUTHORS") or
  die "Cannot open output file $package\/ \n";

print OUTPUT "Authors: \n";

close(OUTPUT);

#
#  COPYING
#

open(OUTPUT, ">"."$package\/COPYING") or
  die "Cannot open output file $package\/COPYING \n";

print OUTPUT "\#\n";
print OUTPUT "\# Copyright (c) \n";
print OUTPUT "\#\n";
print OUTPUT "\# Permission to use, copy, modify, and distribute this software for any\n";
print OUTPUT "\# purpose with or without fee is hereby granted, provided that the above\n";
print OUTPUT "\# copyright notice and this permission notice appear in all copies.\n";
print OUTPUT "\#\n";
print OUTPUT "\# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n";
print OUTPUT "\# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n";
print OUTPUT "\# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n";
print OUTPUT "\# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n";
print OUTPUT "\# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n";
print OUTPUT "\# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n";
print OUTPUT "\# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n";
print OUTPUT "\n";

close(OUTPUT);

#
#  doc/pictures/footer.txt
#

open(OUTPUT, ">"."$package\/doc\/pictures\/footer.txt") or
  die "Cannot open output file $package\/doc\/pictures\/footer.txt \n";


print OUTPUT "Copy in this directory the image you wish to use in the footer of the documentation or edit file $package\/doc\/footer.html and\n";
print OUTPUT "remove this file.\n";

close(OUTPUT);

#
#  unitTesting/CMakeLists.txt
#

open(OUTPUT, ">"."$package\/unitTesting\/CMakeLists.txt") or
  die "Cannot open output file $package\/unitTesting\/CMakeLists.txt \n";

print OUTPUT "# \n";
print OUTPUT "#  Copyright \n";
print OUTPUT "# \n";
print OUTPUT "\n";
print OUTPUT "SET(EXECUTABLE_NAME test\${PROJECT_NAME})\n";
print OUTPUT "\n";
print OUTPUT "ADD_DEFINITIONS(-DDEBUG=2)\n";
for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "\n";
  print OUTPUT "# provide path to library lib".$dep[$iDep].".so\n";
  print OUTPUT "LINK_DIRECTORIES(\${_".$dep[$iDep]."_LIBRARY_DIRS})\n";
}
print OUTPUT "\n";
print OUTPUT "ADD_EXECUTABLE(\${EXECUTABLE_NAME}\n";
print OUTPUT "  main.cpp\n";
print OUTPUT "  $package"."Test.cpp)\n";
print OUTPUT "\n";
print OUTPUT "INCLUDE_DIRECTORIES(\${CMAKE_SOURCE_DIR}/include)\n";
print OUTPUT "\n";
print OUTPUT "LINK_DIRECTORIES(\${\${PROJECT_NAME}_BINARY_DIR}/src)\n";
print OUTPUT "TARGET_LINK_LIBRARIES(\${EXECUTABLE_NAME}\n";
print OUTPUT "  $package)\n";
for ($iDep=0; $iDep<$nDep; $iDep++) {
  print OUTPUT "\n";
  print OUTPUT "# Add ".$dep[$iDep]." compilation flags and link to library lib".$dep[$iDep].".so\n";
  print OUTPUT "ADD_DEFINITIONS(\${_".$dep[$iDep]."_CFLAGS})\n";
  print OUTPUT "TARGET_LINK_LIBRARIES(\${EXECUTABLE_NAME} \${_".$dep[$iDep]."_LIBRARIES})\n";
}

close(OUTPUT);

#
#  unitTesting/main.cpp
#

open(OUTPUT, ">"."$package\/unitTesting\/main.cpp") or
  die "Cannot open output file $package\/unitTesting\/main.cpp \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#include \"$package"."Test.h\" \n";
print OUTPUT "\n";
print OUTPUT "int main (int argc, char\*\* argv)\n";
print OUTPUT "{\n";
print OUTPUT "  C$package"."Test testC$package();\n";
print OUTPUT "}\n";
print OUTPUT "  C$package *variable=new C$package();\n";
print OUTPUT "\n";
print OUTPUT "\n";

close(OUTPUT);


#
#  unitTesting\/$package"."Test.h
#

open(OUTPUT, ">"."$package\/unitTesting\/$package"."Test.h") or
  die "Cannot open output file $package\/unitTesting\/$package"."Test.h \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#include \"$package\/$package.h\" \n";
print OUTPUT "\n";
print OUTPUT "\/\**\n";
print OUTPUT " \\brief UnitTesting class of class C$package\n";
print OUTPUT "\*\/\n";
print OUTPUT "class C$package"."Test\n";
print OUTPUT "{\n";
print OUTPUT "public:\n";
print OUTPUT "  \/\**\n";
print OUTPUT "   \\brief Constructor\n";
print OUTPUT "  \*\/\n";
print OUTPUT "  C$package"."Test();\n";
print OUTPUT "private:\n";
print OUTPUT "  C$package att$package;\n";
print OUTPUT "};\n";
print OUTPUT "\n";

close(OUTPUT);


#
#  unitTesting\/$package"."Test.cpp
#

open(OUTPUT, ">"."$package\/unitTesting\/$package"."Test.cpp") or
  die "Cannot open output file $package\/unitTesting\/$package"."Test.cpp \n";

print OUTPUT "\/\*\n";
print OUTPUT " \*  Copyright\n";
print OUTPUT " \*\/\n";
print OUTPUT "\n";
print OUTPUT "\#include <iostream>\n";
print OUTPUT "\#include \"$package"."Test.h\" \n";
print OUTPUT "\n";
print OUTPUT "C$package"."Test\:\:C$package"."Test()\n";
print OUTPUT "{\n";
print OUTPUT "  std::cout << \"Constructor of unitTesting object of class C$package.\" << std::endl;\n";
print OUTPUT "}\n";

close(OUTPUT);

print "To configure and test this package, do the following commands\n";
print "cd $package\n";
print "mkdir build\n";
print "cd build\n";
print "cmake -DCMAKE_INSTALL_PREFIX=...   ..\n";
print "make\n";
print "make install\n";
