#! /usr/bin/perl  --                                                                                -*-perl-*-

##########
# README #
##########
#
# This scripts allows automatic extraction of package dependencies
# It is a perl script. To use it:
# $ chmod u+x packageDep 
# $ cd /tmp && /path/to/packageDep -p foo
#
# It will create a text file in /tmp/foo.

use strict;
use warnings;
use Getopt::Long;

my ($pkg, $outputFile, $print_version, $print_help);
my $usage = "packageDep -p <packageName> -o <outputFile>";
my $version = "0.1";

my $number = '-?\d+\.?\d*[eE]?-?\d*';
my $versionNumber = '\d+\..*';
my $name = '[\w\d\.\/_-]+';

$pkg="";
$outputFile="";

usage() if !GetOptions("version|v"   => \$print_version,
                       "help|h"      => \$print_help,
                       "package|p=s" => \$pkg,
                       "output|o=s" => \$outputFile);

if ($print_version) {
    print "packageDep version $version\n";
    exit;
}

if ($print_help) {
    print "$usage\n
  Generate a text file describing the dependencies of a package

  --version|-v
     print version information.

  --help|-?
    print help.\n";
    exit;
}

sub usage {
    print "Unknown option: @_\n" if ( @_ );
    print "$usage\n";
    print "Use --help for additional information.\n";
    exit;
}


my $pkgConfigPath = $ENV{"PKG_CONFIG_PATH"};

my @path = split(/:/, $pkgConfigPath);
my $key;
my $value;

# Gather all packages in this array to avoid handling them several times.
my %allPkg;
$allPkg{"$pkg"} = $pkg;

# Gather all dependencies in this array to avoid hanlding them several times.
my %allDep;
my ($i, $j);

#
#  Loop over each path of PKG_CONFIG_PATH
#

my %dep2;

sub extractDep {
  my $argument = $_[0];
  print "Scanning $argument\n";
  my $found=0;
  my @dep;

  for ($i=0; $i < scalar(@path); $i++) {
    my $filePc = "$path[$i]/$argument.pc";

    if (open(INPUT, $filePc)) {
      while (<INPUT>) {
	if ((/^(\s*Requires:\s+)(.+)/)) {
	  my $line = $2;
	  @dep = split(/,/, $line);
	  $found=1;
	  for ($j=0; $j < scalar(@dep); $j++) {
	    if (($dep[$j] =~ (/^\s*($name)\s+>=\s+($versionNumber)/)) ||
		($dep[$j] =~ (/^\s*($name)\s*/))) {
	      $dep2{$argument}[$j] = $1;
	      print "  $dep2{$argument}[$j]\n";
	      my $tmpDep = "$1 -> $argument";
	      $allPkg{$1} = $1;
	      $allDep{$tmpDep} = $tmpDep;
	    }
	    else {
	      $dep2{$argument}[$j] = "";
	    }
	  }
	}
      }
      close(INPUT);
    }
    if ($found) {
      my @tmpArray = $dep2{$argument};
      print "$tmpArray[0]\n";
      my $sizeDep2=scalar($dep2{$argument});
      print "size of dep2 = $sizeDep2\n";
      exit;
      for ($j=0; $j < $sizeDep2; $j++) {
	print "j= $j\n";
	if ($dep2{$argument}[$j] ne "") {
	  extractDep($dep2{$argument}[$j]);
	}
      }
    }
  }
}

#
# Recursively extract packages and dependencies
#
extractDep ($pkg);

#
# Parse array of packages and dependencies
#
open(OUTPUT, ">".$outputFile) or die ("cannot open $outputFile");

print OUTPUT "digraph CD  {\n";
print OUTPUT "\tsize = \"12,15\"\n";
print OUTPUT "\trankdir = BT\n";
print OUTPUT "\tcompound=true\n";
print OUTPUT "\n";

my @packages = keys(%allPkg);
my @dependencies = keys(%allDep);

for ($i=0; $i<scalar(@packages); $i++) {
  print OUTPUT "\t$packages[$i] [shape = box]\n";
}

for ($i=0; $i<scalar(@dependencies); $i++) {
  print OUTPUT "\t$dependencies[$i]\n";
}

print OUTPUT "}\n";
